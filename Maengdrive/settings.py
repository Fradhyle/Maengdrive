"""
Django settings for Maengdrive project.

Generated by 'django-admin startproject' using Django 4.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""
import json
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
SETTINGS = BASE_DIR / "settings.json"
if SETTINGS.exists() == True:
    with open(SETTINGS, mode="r", encoding="utf-8") as f:
        SETTINGS = json.load(f)
else:
    SETTINGS = None


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = "django-insecure-notx)rj1)vve16+l_fgajmq&#9cu9venlzd@-$s815#gr#%!0%"
if SETTINGS:
    SECRET_KEY = SETTINGS["SECRET_KEY"]
else:
    try:
        SECRET_KEY = os.environ["SECRET_KEY"]
    except KeyError:
        SECRET_KEY = (
            "django-insecure-notx)rj1)vve16+l_fgajmq&#9cu9venlzd@-$s815#gr#%!0%"
        )

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
if SETTINGS:
    DEBUG = SETTINGS["DEBUG"]
else:
    try:
        if os.environ["DEBUG"] == "0":
            DEBUG = False
        elif os.environ["DEBUG"] == "1":
            DEBUG = True
    except KeyError:
        DEBUG = True

ALLOWED_HOSTS = []
if SETTINGS:
    ALLOWED_HOSTS = SETTINGS["ALLOWED_HOSTS"]
else:
    try:
        hostnames = os.environ["WEBSITE_HOSTNAME"]
        hostnames = hostnames.split(",")
        ALLOWED_HOSTS.extend(hostnames)
    except KeyError:
        ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "whitenoise.runserver_nostatic",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

apps = []
for _ in BASE_DIR.glob("*"):
    if _.is_dir():
        if _.stem not in [".git", ".vs", ".vscode"]:
            if _.stem != BASE_DIR.stem:
                apps.append(_.stem)

INSTALLED_APPS.extend(apps)

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "Maengdrive.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "Maengdrive.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
try:
    db_path = os.environ["DB_PATH"]
except KeyError:
    db_path = BASE_DIR / "db.sqlite3"

try:
    db_timeout = int(os.environ["DB_TIMEOUT"])
except KeyError:
    db_timeout = 60

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        # "NAME": BASE_DIR / "db.sqlite3",
        "NAME": db_path,
        "OPTIONS": {
            "timeout": db_timeout,
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "ko-kr"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

# STATIC_URL = "static/"
STATIC_URL = os.environ.get("DJANGO_STATIC_URL", "/static/")
STATIC_ROOT = os.environ.get("DJANGO_STATIC_ROOT", "./static/")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

MEDIA_URL = os.environ.get("DJANGO_MEDIA_URL", "/media/")
MEDIA_ROOT = os.environ.get("DJANGO_MEDIA_ROOT", "/media/")

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Custom User Model
AUTH_USER_MODEL = "users.User"
